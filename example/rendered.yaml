AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  AWSInstanceType2Arch:
    m1.small:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
      HVMG2: ami-0a9ce9fecc3d1daf8
    cn-north-1:
      HVM64: ami-0a4eaf6c4454eda75
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0233214e13e500f77
      HVMG2: ami-06223d46a6d0661c7
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    us-west-2:
      HVM64: ami-a0cfeed8
      HVMG2: ami-0e09505bc235aa82d
Outputs:
  AllSecurityGroups:
    Description: Security Groups that are associated with the EC2 instance
    Value:
    - ', '
    - AllSecurityGroups.Value
Parameters:
  ExistingSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
  ExistingVPC:
    Description: The VPC ID that includes the security groups in the ExistingSecurityGroups
      parameter.
    Type: AWS::EC2::VPC::Id
  InstanceType:
    AllowedValues:
    - t2.micro
    - m1.small
    Default: t2.micro
    Type: String
Resources:
  AllSecurityGroups:
    Properties:
      AppendedItem: SecurityGroup
      List: ExistingSecurityGroups
      ServiceToken: AppendItemToListFunction.Arn
    Type: Custom::Split
  AppendItemToListFunction:
    Properties:
      Code:
        ZipFile:
        - ''
        - - var response = require('cfn-response');
          - exports.handler = function(event, context) {
          - '   var responseData = {Value: event.ResourceProperties.List};'
          - '   responseData.Value.push(event.ResourceProperties.AppendedItem);'
          - '   response.send(event, context, response.SUCCESS, responseData);'
          - '};'
      Handler: index.handler
      LoggingConfig:
        LogGroup: MyLambdaLogGroup
      Role: LambdaExecutionRole.Arn
      Runtime: nodejs20.x
    Type: AWS::Lambda::Function
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:*
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  MyEC2Instance:
    Properties:
      ImageId:
      - AWSRegionArch2AMI
      - AWS::Region
      - - AWSInstanceType2Arch
        - t2.micro
        - Arch
      InstanceType: t2.micro
      SecurityGroupIds: AllSecurityGroups.Value
    Type: AWS::EC2::Instance
  MyLambdaLogGroup:
    Properties:
      LogGroupClass: Infrequent Access
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup
  SecurityGroup:
    Properties:
      GroupDescription: Allow HTTP traffic to the host
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId: ExistingVPC
    Type: AWS::EC2::SecurityGroup
